/*
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});
*/
var isBetween = function (A, B, C) {
    return (A <= B && B <= C);
};

function Card(s, n) {
    var suit = s;
    var number = n;
    this.getSuit = function () {
        return suit;
    };
    this.getNumber = function () {
        return number;
    };
}

Card.prototype.getValue = function () {
	return this.getNumber() === 1 ? 11 : isBetween(11, this.getNumber(), 13) ? 10 : this.getNumber();
};

var myCalledCards = [];
var dealerCalledCards = [];
var usedCards = [];
var myRunningTotal;
var dealerRunningTotal;

var initDeal = function () {

	//Player Hand
	var myHand = new Card((Math.floor(Math.random() * 4) + 1), (Math.floor(Math.random() * 13) + 1));
	var mySecondHand = new Card((Math.floor(Math.random() * 4) + 1), (Math.floor(Math.random() * 13) + 1));
	var cardSuit = myHand.getSuit();
	var cardNumber = myHand.getNumber();
	var cardSuitSuit = '';
	var cardNumberValue = cardNumber;
	
	if (cardSuit == 1){
		cardSuitSuit = 'Hearts';
	}
	if (cardSuit == 2){
                cardSuitSuit = 'Spades';
        }
	if (cardSuit == 3){
                cardSuitSuit = 'Diamonds';
        }
	if (cardSuit == 4){
                cardSuitSuit = 'Clubs';
        }
	
	if (cardNumber == 11){
		cardNumberValue = 'Jack';
		cardNumber = 10;
	}
	if (cardNumber == 12){
                cardNumberValue = 'Queen';
		cardNumber = 10;
        }
	if (cardNumber == 13){
                cardNumberValue = 'King';
		cardNumber = 10;
        }
	var myCardString = `${cardNumberValue} of ${cardSuitSuit}`;

	//Player Second Hand
	var secondCardSuit = mySecondHand.getSuit();
        var secondCardNumber = mySecondHand.getNumber();
        var secondCardSuitSuit = '';
        var secondCardNumberValue = secondCardNumber;

        if (secondCardSuit == 1){
                secondCardSuitSuit = 'Hearts';
        }
        if (secondCardSuit == 2){
                secondCardSuitSuit = 'Spades';
        }
        if (secondCardSuit == 3){
                secondCardSuitSuit = 'Diamonds';
        }
        if (secondCardSuit == 4){
                secondCardSuitSuit = 'Clubs';
        }

        if (secondCardNumber == 11){
                secondCardNumberValue = 'Jack';
		secondCardNumber = 10;
        }
        if (secondCardNumber == 12){
                secondCardNumberValue = 'Queen';
		secondCardNumber = 10;
        }
        if (secondCardNumber == 13){
                secondCardNumberValue = 'King';
		secondCardNumber = 10;
        }
        var mySecondCardString = `${secondCardNumberValue} of ${secondCardSuitSuit}`;
	

		
	//Dealer Stuff
	var dealerHand = new Card((Math.floor(Math.random() * 4) + 1), (Math.floor(Math.random() * 13) + 1));
	var dealerCardSuit = dealerHand.getSuit();
        var dealerCardNumber = dealerHand.getNumber();
        var dealerCardSuitSuit = '';
        var dealerCardNumberValue = dealerCardNumber;

        if (dealerCardSuit == 1){
                dealerCardSuitSuit = 'Hearts';
        }
        if (dealerCardSuit == 2){
                dealerCardSuitSuit = 'Spades';
        }
        if (dealerCardSuit == 3){
                dealerCardSuitSuit = 'Diamonds';
        }
        if (dealerCardSuit == 4){
                dealerCardSuitSuit = 'Clubs';
        }

        if (dealerCardNumber == 11){
                dealerCardNumberValue = 'Jack';
		dealerCardNumber = 10;
        }
        if (dealerCardNumber == 12){
                dealerCardNumberValue = 'Queen';
		 dealerCardNumber = 10;
        }
        if (dealerCardNumber == 13){
                dealerCardNumberValue = 'King';
		dealerCardNumber = 10;
        }
	var dealerCardString = `${dealerCardNumberValue} of ${dealerCardSuitSuit}`;

	//Dealer Second Hand Stuff
        var dealerSecondHand = new Card((Math.floor(Math.random() * 4) + 1), (Math.floor(Math.random() * 13) + 1));
        var dealerSecondCardSuit = dealerSecondHand.getSuit();
        var dealerSecondCardNumber = dealerSecondHand.getNumber();
        var dealerSecondCardSuitSuit = '';
        var dealerSecondCardNumberValue = dealerSecondCardNumber;

        if (dealerSecondCardSuit == 1){
                dealerSecondCardSuitSuit = 'Hearts';
        }
        if (dealerSecondCardSuit == 2){
                dealerSecondCardSuitSuit = 'Spades';
        }
        if (dealerSecondCardSuit == 3){
                dealerSecondCardSuitSuit = 'Diamonds';
        }
        if (dealerSecondCardSuit == 4){
                dealerSecondCardSuitSuit = 'Clubs';
        }

        if (dealerSecondCardNumber == 11){
                dealerSecondCardNumberValue = 'Jack';
                dealerSecondCardNumber = 10;
        }
        if (dealerSecondCardNumber == 12){
                dealerSecondCardNumberValue = 'Queen';
                 dealerSecondCardNumber = 10;
        }
        if (dealerSecondCardNumber == 13){
                dealerSecondCardNumberValue = 'King';
                dealerSecondCardNumber = 10;
        }
        var dealerSecondCardString = `${dealerSecondCardNumberValue} of ${dealerSecondCardSuitSuit}`;
		
	
	var myTotal = cardNumber + secondCardNumber;
	var dealerTotal = dealerCardNumber + dealerSecondCardNumber;

	console.log(`Dealer has the ${dealerCardString} and ${dealerSecondCardString} for a value of ${dealerTotal}`);
	console.log(`You have the ${myCardString} and ${mySecondCardString} for a value of ${myTotal}`);

	myCalledCards.push(myCardString);
	myCalledCards.push(mySecondCardString);

	dealerCalledCards.push(dealerCardString);
	dealerCalledCards.push(dealerSecondCardString);
	
	myRunningTotal =+ myTotal;
	dealerRunningTotal =+ dealerTotal;

//	return cardio;
};

var hitMe = function() {

        //Hit Me Card
        var thisHand = new Card((Math.floor(Math.random() * 4) + 1), (Math.floor(Math.random() * 13) + 1));
        var thisCardSuit = thisHand.getSuit();
        var thisCardNumber = thisHand.getNumber();
        var thisCardSuitSuit = '';
        var thisCardNumberValue = thisCardNumber;

        if (thisCardSuit == 1){
                thisCardSuitSuit = 'Hearts';
        }
        if (thisCardSuit == 2){
                thisCardSuitSuit = 'Spades';
        }
        if (thisCardSuit == 3){
                thisCardSuitSuit = 'Diamonds';
        }
        if (thisCardSuit == 4){
                thisCardSuitSuit = 'Clubs';
        }

        if (thisCardNumber == 11){
                thisCardNumberValue = 'Jack';
                thisCardNumber = 10;
        }
        if (thisCardNumber == 12){
                thisCardNumberValue = 'Queen';
                 thisCardNumber = 10;
        }
        if (thisCardNumber == 13){
                thisCardNumberValue = 'King';
                thisCardNumber = 10;
        }
        var thisCardString = `${thisCardNumberValue} of ${thisCardSuitSuit}`;
	
	if (usedCards.indexOf(thisCardString) > -1){
		//rerun the card
		//add it to the hand and used card deck and value of the player/dealer
		//should create a card factory to generate card. function should be called generateCard.
	} else{
		//add it to the hand and used card deck and value of the player/dealer
	}

}
/*
function Deck() {
    var accept = {
        1: [],
        2: [],
        3: [],
        4: []
    };
    for (var s in accept) {
        for (var i = 0; i < 13; ++i)
            accept[s][i] = 1;
    }

    this.TryAddDeck = function (newCard) {
        if (accept[newCard.getSuit()][newCard.getNumber() - 1]) {
            accept[newCard.getSuit()][newCard.getNumber() - 1] = 0;
            return 1;
        }
        return 0;
    };
}

function Hand() {
    var pack = new Deck(),
        deck = [],
        l = deck.length,
        string = '';
    this.good = 1;
    this.printHand = function () {
        var suits = ['Hearts', 'Diamonds', 'Clubs', 'Spades'];
                var SuitsEmoji = ["?", "?", "?", "?"];
        var face = {
            1: 'Ace',
            11: 'Jack',
            12: 'Queen',
            13: 'King'
        };
	while (l < deck.length) {
            var num = deck[l].getNumber();
            string += (l ? ', ' : '') + (num ^ 1 && num < 11 ? num : face[num]) + ' of ' + suits[deck[l].getSuit() - 1];
            ++l;
        }
        return string;
    };
//console.log(deck.length);
//console.log(l);
}

*/
//console.log(Hand());
//console.log(deal());
//console.log(((Math.floor(Math.random() * 4) + 1)) + `, ` + (Math.floor(Math.random() * 13) + 1) );
//deal();
//console.log(deal().cardio);
//Deal gets run first
initDeal();
usedCards = myCalledCards.concat(dealerCalledCards);
console.log(dealerCalledCards);
console.log(myCalledCards);
console.log(usedCards);
console.log(myRunningTotal);
//Then considering what cards they see, they can hit stay or 



